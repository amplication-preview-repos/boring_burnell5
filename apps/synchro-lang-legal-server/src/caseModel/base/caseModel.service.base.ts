/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CaseModel as PrismaCaseModel,
  Document as PrismaDocument,
  Message as PrismaMessage,
  Report as PrismaReport,
  Research as PrismaResearch,
  User as PrismaUser,
} from "@prisma/client";

export class CaseModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CaseModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.caseModel.count(args);
  }

  async caseModels(
    args: Prisma.CaseModelFindManyArgs
  ): Promise<PrismaCaseModel[]> {
    return this.prisma.caseModel.findMany(args);
  }
  async caseModel(
    args: Prisma.CaseModelFindUniqueArgs
  ): Promise<PrismaCaseModel | null> {
    return this.prisma.caseModel.findUnique(args);
  }
  async createCaseModel(
    args: Prisma.CaseModelCreateArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.create(args);
  }
  async updateCaseModel(
    args: Prisma.CaseModelUpdateArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.update(args);
  }
  async deleteCaseModel(
    args: Prisma.CaseModelDeleteArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.delete(args);
  }

  async findDocuments(
    parentId: string,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.caseModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.caseModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.caseModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findResearchItems(
    parentId: string,
    args: Prisma.ResearchFindManyArgs
  ): Promise<PrismaResearch[]> {
    return this.prisma.caseModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .researchItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.caseModel
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

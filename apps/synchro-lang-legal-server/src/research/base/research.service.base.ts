/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Research as PrismaResearch,
  CaseModel as PrismaCaseModel,
} from "@prisma/client";

export class ResearchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ResearchCountArgs, "select">): Promise<number> {
    return this.prisma.research.count(args);
  }

  async researchItems(
    args: Prisma.ResearchFindManyArgs
  ): Promise<PrismaResearch[]> {
    return this.prisma.research.findMany(args);
  }
  async research(
    args: Prisma.ResearchFindUniqueArgs
  ): Promise<PrismaResearch | null> {
    return this.prisma.research.findUnique(args);
  }
  async createResearch(
    args: Prisma.ResearchCreateArgs
  ): Promise<PrismaResearch> {
    return this.prisma.research.create(args);
  }
  async updateResearch(
    args: Prisma.ResearchUpdateArgs
  ): Promise<PrismaResearch> {
    return this.prisma.research.update(args);
  }
  async deleteResearch(
    args: Prisma.ResearchDeleteArgs
  ): Promise<PrismaResearch> {
    return this.prisma.research.delete(args);
  }

  async getCaseField(parentId: string): Promise<PrismaCaseModel | null> {
    return this.prisma.research
      .findUnique({
        where: { id: parentId },
      })
      .caseField();
  }
}
